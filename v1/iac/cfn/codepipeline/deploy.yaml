AWSTemplateFormatVersion: "2010-09-09"
Description: "Create the CodePipeline needed to deploy the event bus - (v1.4.0)"
Parameters:
  # General Configuration
  InfrastructureName:
    Type: "String"
    Description: "A name used to differentiate this infrastructure from other existing infrastructure."
    Default: "main"
  SecondRegion:
    Type: "String"
    Description: "What is the second region this service should be deployed to?"
    AllowedValues:
    - "NONE"
    - "us-east-1"
    - "us-east-2"
    - "us-west-2"
    Default: "us-east-2"
  # CodeBuild Configuration
  CodeBuildAppTestProject:
    Type: "String"
    Description: "The name of the CodeBuild test project."
  CodeBuildInfrastructureTestProject:
    Type: "String"
    Description: "The name of the CodeBuild infrastructure test project."
  UnstableBranch:
    Type: "String"
    Description: "The branch used to build the unstable/DEV environment."
    Default: ""
  # CodePipeline Configuration
  CloudFormationCapabilities:
    Type: "String"
    Description: "A list of the capabilities that CloudFormation should have when executing stacks via CodePipeline."
    Default: "CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND"
  EnableRelease:
    Type: "String"
    Description: "Should the release Lambda functionality be enabled for this CodePipeline?"
    AllowedValues:
    - "Yes"
    - "No"
    Default: "No"
  ProjectName:
    Type: "String"
    Description: "The specific name of the CodePipeline project."
  AppBaseFolder:
    Type: "String"
    Description: "The base repository folder for the application."
    Default: "v1"
  ActionMode:
    Type: "String"
    Description: "The CodePipeline CloudFormation stack action mode."
    AllowedValues:
    - "CHANGE_SET_EXECUTE"
    - "CHANGE_SET_REPLACE"
    - "CREATE_UPDATE"
    - "DELETE_ONLY"
    - "REPLACE_ON_FAILURE"
    Default: "CREATE_UPDATE"
  GitMetadataFile:
    Type: "String"
    Description: "The name of the JSON file that contains the git metadata (needs to be a flat JSON file)."
    Default: "git-metadata.json"
  # CodePipeline Notification Configuration
  EnableNotifications:
    Type: "String"
    Description: "Should an e-mail SNS topic and Slack notification hook be enabled?  Please note this will only work the the Slack notifications Lambda has already been created for this region."
    AllowedValues:
    - "Yes"
    - "No"
    Default: "Yes"
  SlackNotificationLambda:
    Type: "String"
    Description: "What is the name of the function used to send out Slack notifications?"
    Default: "slack-notification-prod"
  # Source Configuration
  AppGitHubOrganization:
    Type: "String"
    Description: "The GitHub organization that the repository is a part of."
  AppSourceRepository:
    Type: "String"
    Description: "What is the name of the GitHub application repository?"
  AppSourceBranch:
    Type: "String"
    Description: "What is the GitHub application repository branch?"
  BaseArtifactFolder:
    Type: "String"
    Description: "The base artifact folder (used mainly for service environment source files)."
    Default: "base"
  CannedAcl:
    Type: "String"
    Description: "The production S3 bucket access ARN."
    AllowedValues:
    - "private"
    - "public-read"
    - "public-read-write"
    - "aws-exec-read"
    - "authenticated-read"
    - "bucket-owner-read"
    - "bucket-owner-full-control"
    - "log-delivery-write"
    Default: "private"
  SourceFolder:
    Type: "String"
    Description: "The name of the source folder."
  TestSourceFile:
    Type: "String"
    Description: "The name of the ZIP file for the test source."
    Default: "test.zip"
  EventSourceFile:
    Type: "String"
    Description: "The name of the ZIP file for the service source."
    Default: "lambda.zip"
  EventEnvSourceFile:
    Type: "String"
    Description: "The name of the ZIP file for the service environment source."
    Default: "lambda-env.zip"
  EventSourcePollForChanges:
    Type: "String"
    Description: "Should the CodePipeline poll for event bus source file changes?"
    AllowedValues:
    - "Yes"
    - "No"
    Default: "Yes"
  # Production Configuration
  ProdBucket:
    Type: "String"
    Description: "The production artifact bucket."
  # Test CodeBuild Configuration
  CodeBuildRunAppTests:
    Type: "String"
    Description: "Are there CodeBuild-based application tests that should be run for this project?"
    AllowedValues:
    - "Yes"
    - "No"
    Default: "No"
  CodeBuildRunInfrastructureTests:
    Type: "String"
    Description: "Are there CodeBuild-based infrastructure tests that should be run for this project?"
    AllowedValues:
    - "Yes"
    - "No"
    Default: "No"
  # Manual Approval Configuration
  ApprovalMessagePrefix:
    Type: "String"
    Description: "Message prefix to be displayed in the approval block."
    Default: "Should this version of the application be promoted to the"
  ApprovalEnvironment:
    Type: "String"
    Description: "The environment that the Docker image will move to next."
    Default: ""
  ApprovalMessageSuffix:
    Type: "String"
    Description: "Message prefix to be displayed in the approval block."
    Default: "environment?"
  # Bus Configuration
  BusName:
    Type: "String"
    Description: "The name of the events bus."
    Default: "standard"
  # Testing Configuration
  EnableTestRule:
    Type: "String"
    Description: "Should the test rule and archive be enabled?"
    AllowedValues:
    - "Yes"
    - "No"
    Default: "No"
  # Tags
  TagEnvironment:
    Type: "String"
    Description: "What is the environment tag?"
    AllowedValues:
    - "dev"
    - "int"
    - "qa"
    - "stage"
    - "prod"
    Default: "int"
Conditions:
  AppBaseFolder: !Not [ !Equals [ !Ref AppBaseFolder, "" ] ]
  ApprovalEnvironment: !Not [ !Equals [ !Ref ApprovalEnvironment, "" ] ]
  CodeBuildRunAppTests: !Equals [ !Ref CodeBuildRunAppTests, "Yes" ]
  CodeBuildRunInfrastructureTests: !Equals [ !Ref CodeBuildRunInfrastructureTests, "Yes" ]
  Development: !Equals [ !Ref TagEnvironment, "dev" ]
  EnableTestRule: !Equals [ !Ref EnableTestRule, "Yes" ]
  EnableNotifications: !Equals [ !Ref EnableNotifications, "Yes" ]
  EnableRelease: !Equals [ !Ref EnableRelease, "Yes" ]
  EventSourcePollForChanges: !Equals [ !Ref EventSourcePollForChanges, "Yes" ]
  Integration: !Equals [ !Ref TagEnvironment, "int" ]
  NotDevelopment: !Not [ !Equals [ !Ref TagEnvironment, "dev" ] ]
  NotIntegration: !Not [ !Equals [ !Ref TagEnvironment, "int" ] ]
  NotQualityAssurance: !Not [ !Equals [ !Ref TagEnvironment, "qa" ] ]
  NotStage: !Not [ !Equals [ !Ref TagEnvironment, "stage" ] ]
  NotProduction: !Not [ !Equals [ !Ref TagEnvironment, "prod" ] ]
  Production: !Equals [ !Ref TagEnvironment, "prod" ]
  QualityAssurance: !Equals [ !Ref TagEnvironment, "qa" ]
  SecondRegion: !Not [ !Equals [ !Ref SecondRegion, "NONE" ] ]
  Stage: !Equals [ !Ref TagEnvironment, "stage" ]
  CodeBuildRunAppTestsSecondRegion: !And
  - !Condition CodeBuildRunAppTests
  - !Condition SecondRegion
  CodeBuildRunInfrastructureTestsSecondRegion: !And
  - !Condition CodeBuildRunInfrastructureTests
  - !Condition SecondRegion
  EnableTestRuleSecondRegion: !And
  - !Condition EnableTestRule
  - !Condition SecondRegion
Resources:
  CodePipelineEventsRule:
    Type: "AWS::Events::Rule"
    Condition: EnableNotifications
    Properties:
      Name: !Sub "codepipeline-${ProjectName}-${TagEnvironment}"
      Description: !Sub 'Slack notifications for the "${ProjectName}-${TagEnvironment}" CodePipeline.'
      State: "ENABLED"
      EventPattern:
        source:
        - "aws.codepipeline"
        detail-type: # The following targets just the main CodePipeline states, you can also target individual stages (CodePipeline Stage Execution State Change) or actions (CodePipeline Action Execution State Change)
        - "CodePipeline Pipeline Execution State Change"
        # - "CodePipeline Stage Execution State Change"
        # - "CodePipeline Action Execution State Change"
        detail:
          state: # These are the CodePipeline states: CANCELED, FAILED, RESUMED, STARTED, SUCCEEDED, and SUPERSEDED: https://docs.aws.amazon.com/codepipeline/latest/userguide/detect-state-changes-cloudwatch-events.html
          - "CANCELED"
          - "FAILED"
          - "STARTED"
          - "SUCCEEDED"
          pipeline:
          - !Sub "${ProjectName}-${TagEnvironment}"
      Targets:
      - Arn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SlackNotificationLambda}"
        Id: !Sub "slack-lambda-${ProjectName}-${TagEnvironment}"
  CodePipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      RoleArn: !Sub "{{resolve:ssm:/iam/${InfrastructureName}/role/codepipeline/${ProjectName}/deploy/arn}}"
      Name: !Sub "${ProjectName}-${TagEnvironment}"
      RestartExecutionOnUpdate: true
      ArtifactStores:
      - Region: "us-east-1"
        ArtifactStore:
          Type: "S3"
          Location: !Sub "{{resolve:ssm:/account/name}}-${InfrastructureName}-codepipeline-us-east-1"
      - Region: "us-east-2"
        ArtifactStore:
          Type: "S3"
          Location: !Sub "{{resolve:ssm:/account/name}}-${InfrastructureName}-codepipeline-us-east-2"
      - Region: "us-west-2"
        ArtifactStore:
          Type: "S3"
          Location: !Sub "{{resolve:ssm:/account/name}}-${InfrastructureName}-codepipeline-us-west-2"
      Stages:

      # Set up Source Actions

      - Name: "Source"
        Actions:
        - Name: "Event_Bus_Source"
          Namespace: "Event"
          ActionTypeId:
            Category: "Source"
            Owner: "AWS"
            Provider: "S3"
            Version: "1"
          Configuration:
            S3Bucket: !Sub "{{resolve:ssm:/s3/${InfrastructureName}/bucket/artifact/name}}"
            S3ObjectKey: !Sub "${ProjectName}/${SourceFolder}/${EventSourceFile}"
            PollForSourceChanges: !If [ EventSourcePollForChanges, "true", "false" ]
          OutputArtifacts:
          - Name: "EVENT_BUS_SOURCE_FILES"
          RunOrder: 1
        - Name: "Event_Env_Source"
          Namespace: "EventEnv"
          ActionTypeId:
            Category: "Source"
            Owner: "AWS"
            Provider: "S3"
            Version: "1"
          Configuration:
            S3Bucket: !Sub "{{resolve:ssm:/s3/${InfrastructureName}/bucket/artifact/name}}"
            #NOTE: This source always pulls from base so that we can pull it at any time from any environment.
            S3ObjectKey: !Sub "${ProjectName}/${BaseArtifactFolder}/${EventEnvSourceFile}"
            PollForSourceChanges: "false"
          OutputArtifacts:
          - Name: "EVENT_BUS_ENV_SOURCE_FILES"
          RunOrder: 1
        - Name: "Test_Source"
          Namespace: "Test"
          ActionTypeId:
            Category: "Source"
            Owner: "AWS"
            Provider: "S3"
            Version: "1"
          Configuration:
            S3Bucket: !Sub "{{resolve:ssm:/s3/${InfrastructureName}/bucket/artifact/name}}"
            S3ObjectKey: !Sub "${ProjectName}/${SourceFolder}/${TestSourceFile}"
            PollForSourceChanges: "false"
          OutputArtifacts:
          - Name: "TEST_SOURCE_FILES"
          RunOrder: 1

      # Application Testing CodeBuild for the First/Primary Region

      - !If
        - CodeBuildRunAppTests
        - Name: "Test_Application"
          Actions:
          - Name: "Run_Test_Build_Primary_Region"
            ActionTypeId:
              Category: "Test"
              Owner: "AWS"
              Provider: "CodeBuild"
              Version: "1"
            Configuration:
              ProjectName: !Ref CodeBuildAppTestProject
              PrimarySource: "TEST_SOURCE_FILES"
              EnvironmentVariables: !Sub |
                [
                  {
                    "name":"APP_BASE_FOLDER",
                    "value":"${AppBaseFolder}",
                    "type":"PLAINTEXT"
                  }
                ]
            InputArtifacts:
            - Name: "TEST_SOURCE_FILES"
            OutputArtifacts:
            - Name: "TEST_EVENT_BUILD_PRIMARY_OUTPUT"
            RunOrder: 1

          # Application Testing CodeBuild for the Secondary Region

          - !If
            - CodeBuildRunAppTestsSecondRegion
            - Name: "Run_Test_Build_Secondary_Region"
              ActionTypeId:
                Category: "Test"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuildAppTestProject
                PrimarySource: "TEST_SOURCE_FILES"
                EnvironmentVariables: !Sub |
                  [
                    {
                      "name":"APP_BASE_FOLDER",
                      "value":"${AppBaseFolder}",
                      "type":"PLAINTEXT"
                    }
                  ]
              InputArtifacts:
              - Name: "TEST_SOURCE_FILES"
              OutputArtifacts:
              - Name: "TEST_EVENT_BUILD_SECONDARY_OUTPUT"
              RunOrder: 1
              Region: !Ref SecondRegion
            - !Ref "AWS::NoValue"
        - !Ref "AWS::NoValue"
      - Name: "Deploy"
        Actions:

        # SNS Testing Topic for the First/Primary Region

        - !If
          - EnableTestRule
          - Name: "SNS_Topic_Primary_Region"
            ActionTypeId:
              Category: "Deploy"
              Owner: "AWS"
              Provider: "CloudFormation"
              Version: "1"
            Configuration:
              ActionMode: !Ref ActionMode
              StackName: !Sub "${InfrastructureName}-sns-topic-${ProjectName}-${TagEnvironment}"
              Capabilities: "CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND"
              TemplatePath: !Sub "EVENT_BUS_SOURCE_FILES::${AppBaseFolder}/iac/cfn/sns/topic.yaml"
              TemplateConfiguration: !Sub "EVENT_BUS_ENV_SOURCE_FILES::${AppBaseFolder}/env/cfn/sns/${TagEnvironment}.json"
              RoleArn: !Sub "{{resolve:ssm:/iam/${InfrastructureName}/role/codepipeline/${ProjectName}/deploy/arn}}"
              OutputFileName: "out.json"
              ParameterOverrides: !Sub |
                {
                  "InfrastructureName": "${InfrastructureName}",
                  "TopicBaseName": "${ProjectName}",
                  "TagEnvironment": "${TagEnvironment}"
                }
            InputArtifacts:
            - Name: "EVENT_BUS_SOURCE_FILES"
            - Name: "EVENT_BUS_ENV_SOURCE_FILES"
            OutputArtifacts:
            - Name: "SNS_TOPIC_OUTPUT_FIRST_REGION"
            RunOrder: 1
            Region: !Ref "AWS::Region"
          - !Ref "AWS::NoValue"

        # SNS Testing Topic for the Secondary Region

        - !If
          - EnableTestRuleSecondRegion
          - Name: "SNS_Topic_Second_Region"
            ActionTypeId:
              Category: "Deploy"
              Owner: "AWS"
              Provider: "CloudFormation"
              Version: "1"
            Configuration:
              ActionMode: !Ref ActionMode
              StackName: !Sub "${InfrastructureName}-sns-topic-${ProjectName}-${TagEnvironment}"
              Capabilities: "CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND"
              TemplatePath: !Sub "EVENT_BUS_SOURCE_FILES::${AppBaseFolder}/iac/cfn/sns/topic.yaml"
              TemplateConfiguration: !Sub "EVENT_BUS_ENV_SOURCE_FILES::${AppBaseFolder}/env/cfn/sns/${TagEnvironment}.json"
              RoleArn: !Sub "{{resolve:ssm:/iam/${InfrastructureName}/role/codepipeline/${ProjectName}/deploy/arn}}"
              OutputFileName: "out.json"
              ParameterOverrides: !Sub |
                {
                  "InfrastructureName": "${InfrastructureName}",
                  "TopicBaseName": "${ProjectName}",
                  "TagEnvironment": "${TagEnvironment}"
                }
            InputArtifacts:
            - Name: "EVENT_BUS_SOURCE_FILES"
            - Name: "EVENT_BUS_ENV_SOURCE_FILES"
            OutputArtifacts:
            - Name: "SNS_TOPIC_OUTPUT_SECOND_REGION"
            RunOrder: 1
            Region: !Ref SecondRegion
          - !Ref "AWS::NoValue"

        # Prepare the Testing Lambda Source for the First/Primary Region

        - !If
          - EnableTestRule
          - Name: "Prepare_Lambda_Source_First_Region"
            ActionTypeId:
              Category: "Deploy"
              Owner: "AWS"
              Provider: "S3"
              Version: "1"
            Configuration:
              BucketName: !Sub "{{resolve:ssm:/s3/${InfrastructureName}/bucket/artifact/name}}"
              Extract: false
              ObjectKey: !Sub "${ProjectName}/${TagEnvironment}/lambda-#{codepipeline.PipelineExecutionId}.zip"
            InputArtifacts:
            - Name: "EVENT_BUS_SOURCE_FILES"
            RunOrder: 2
            Region: !Ref "AWS::Region"
          - !Ref "AWS::NoValue"

        # Prepare the Testing Lambda Source for the Secondary Region

        - !If
          - EnableTestRuleSecondRegion
          - Name: "Prepare_Lambda_Source_Second_Region"
            ActionTypeId:
              Category: "Deploy"
              Owner: "AWS"
              Provider: "S3"
              Version: "1"
            Configuration:
              BucketName: !Sub
              - "${AccountName}-${InfrastructureName}-artifact-${SecondRegion}"
              - AccountName: "{{resolve:ssm:/account/name}}"
              Extract: false
              ObjectKey: !Sub "${ProjectName}/${TagEnvironment}/lambda-#{codepipeline.PipelineExecutionId}.zip"
            InputArtifacts:
            - Name: "EVENT_BUS_SOURCE_FILES"
            RunOrder: 2
            Region: !Ref SecondRegion
          - !Ref "AWS::NoValue"

        # Enable Testing Lambda for the First/Primary Region

        - !If
          - EnableTestRule
          - Name: "Lambda_Function_First_Region"
            Namespace: "PrimaryLambdaFunction"
            ActionTypeId:
              Category: "Deploy"
              Owner: "AWS"
              Provider: "CloudFormation"
              Version: "1"
            Configuration:
              ActionMode: !Ref ActionMode
              StackName: !Sub "${InfrastructureName}-function-${ProjectName}-${TagEnvironment}"
              Capabilities: !Ref CloudFormationCapabilities
              TemplatePath:
                Fn::Sub:
                - "EVENT_BUS_SOURCE_FILES::${Folder}iac/cfn/lambda/function.yaml"
                - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
              TemplateConfiguration:
                Fn::Sub:
                - "EVENT_BUS_ENV_SOURCE_FILES::${Folder}env/cfn/lambda/${TagEnvironment}.json"
                - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
              RoleArn: !Sub "{{resolve:ssm:/iam/${InfrastructureName}/role/codepipeline/${ProjectName}/deploy/arn}}"
              OutputFileName: "out.json"
              ParameterOverrides: !Sub
              - |
                {
                  "AppBaseFolder": "${AppBaseFolder}",
                  "Version": { "Fn::GetParam" : [ "EVENT_BUS_SOURCE_FILES", "${GitMetadataFile}", "release" ] },
                  "GitCommit": { "Fn::GetParam" : [ "EVENT_BUS_SOURCE_FILES", "${GitMetadataFile}", "shortRevision" ] },
                  "Name": "${ProjectName}",
                  "BusName": "${BusName}",
                  "S3Bucket": "${Bucket}",
                  "S3Key": "${ProjectName}/${TagEnvironment}/lambda-#{codepipeline.PipelineExecutionId}.zip",
                  "InfrastructureName": "${InfrastructureName}",
                  "TagEnvironment": "${TagEnvironment}"
                }
              - Bucket: !Sub "{{resolve:ssm:/s3/${InfrastructureName}/bucket/artifact/name}}"
            InputArtifacts:
            - Name: "EVENT_BUS_SOURCE_FILES"
            - Name: "EVENT_BUS_ENV_SOURCE_FILES"
            OutputArtifacts:
            - Name: "LAMBDA_FUNCTION_FIRST_REGION_OUTPUT"
            RunOrder: 3
            Region: !Ref "AWS::Region"
          - !Ref "AWS::NoValue"

        # Enable Testing Lambda for the Secondary Region

        - !If
          - EnableTestRuleSecondRegion
          - Name: "Lambda_Function_Second_Region"
            Namespace: "SecondaryLambdaFunction"
            ActionTypeId:
              Category: "Deploy"
              Owner: "AWS"
              Provider: "CloudFormation"
              Version: "1"
            Configuration:
              ActionMode: !Ref ActionMode
              StackName: !Sub "${InfrastructureName}-function-${ProjectName}-${TagEnvironment}"
              Capabilities: !Ref CloudFormationCapabilities
              TemplatePath:
                Fn::Sub:
                - "EVENT_BUS_SOURCE_FILES::${Folder}iac/cfn/lambda/function.yaml"
                - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
              TemplateConfiguration:
                Fn::Sub:
                - "EVENT_BUS_ENV_SOURCE_FILES::${Folder}env/cfn/lambda/${TagEnvironment}.json"
                - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
              RoleArn: !Sub "{{resolve:ssm:/iam/${InfrastructureName}/role/codepipeline/${ProjectName}/deploy/arn}}"
              OutputFileName: "out.json"
              ParameterOverrides: !Sub
              - |
                {
                  "AppBaseFolder": "${AppBaseFolder}",
                  "Version": { "Fn::GetParam" : [ "EVENT_BUS_SOURCE_FILES", "${GitMetadataFile}", "release" ] },
                  "GitCommit": { "Fn::GetParam" : [ "EVENT_BUS_SOURCE_FILES", "${GitMetadataFile}", "shortRevision" ] },
                  "Name": "${ProjectName}",
                  "BusName": "${BusName}",
                  "S3Bucket": "${Bucket}",
                  "S3Key": "${ProjectName}/${TagEnvironment}/lambda-#{codepipeline.PipelineExecutionId}.zip",
                  "InfrastructureName": "${InfrastructureName}",
                  "TagEnvironment": "${TagEnvironment}"
                }
              - Bucket: !Sub
                - "${AccountName}-${InfrastructureName}-artifact-${SecondRegion}"
                - AccountName: "{{resolve:ssm:/account/name}}"
            InputArtifacts:
            - Name: "EVENT_BUS_SOURCE_FILES"
            - Name: "EVENT_BUS_ENV_SOURCE_FILES"
            OutputArtifacts:
            - Name: "LAMBDA_FUNCTION_SECOND_REGION_OUTPUT"
            RunOrder: 3
            Region: !Ref SecondRegion
          - !Ref "AWS::NoValue"


        # SQS Dead Letter for the First/Primary Region

        - Name: "SQS_Dead_Letter_Queue_Primary_Region"
          ActionTypeId:
            Category: "Deploy"
            Owner: "AWS"
            Provider: "CloudFormation"
            Version: "1"
          Configuration:
            ActionMode: !Ref ActionMode
            StackName: !Sub "${InfrastructureName}-sqs-dead-letter-queue-${ProjectName}-${TagEnvironment}"
            Capabilities: "CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND"
            TemplatePath: !Sub "EVENT_BUS_SOURCE_FILES::${AppBaseFolder}/iac/cfn/sqs/queue.yaml"
            TemplateConfiguration: !Sub "EVENT_BUS_ENV_SOURCE_FILES::${AppBaseFolder}/env/cfn/sqs/queue/dead-letter/${TagEnvironment}.json"
            RoleArn: !Sub "{{resolve:ssm:/iam/${InfrastructureName}/role/codepipeline/${ProjectName}/deploy/arn}}"
            OutputFileName: "out.json"
            ParameterOverrides: !Sub |
              {
                "InfrastructureName": "${InfrastructureName}",
                "BusName": "${BusName}",
                "QueueBaseName": "${ProjectName}-dead-letter",
                "TagEnvironment": "${TagEnvironment}"
              }
          InputArtifacts:
          - Name: "EVENT_BUS_SOURCE_FILES"
          - Name: "EVENT_BUS_ENV_SOURCE_FILES"
          OutputArtifacts:
          - Name: "SQS_DEAD_LETTER_QUEUE_OUTPUT_FIRST_REGION"
          RunOrder: 4
          Region: !Ref "AWS::Region"

        # SQS Dead Letter for the Secondary Region

        - !If
          - SecondRegion
          - Name: "SQS_Dead_Letter_Queue_Second_Region"
            ActionTypeId:
              Category: "Deploy"
              Owner: "AWS"
              Provider: "CloudFormation"
              Version: "1"
            Configuration:
              ActionMode: !Ref ActionMode
              StackName: !Sub "${InfrastructureName}-sqs-dead-letter-queue-${ProjectName}-${TagEnvironment}"
              Capabilities: "CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND"
              TemplatePath: !Sub "EVENT_BUS_SOURCE_FILES::${AppBaseFolder}/iac/cfn/sqs/queue.yaml"
              TemplateConfiguration: !Sub "EVENT_BUS_ENV_SOURCE_FILES::${AppBaseFolder}/env/cfn/sqs/queue/dead-letter/${TagEnvironment}.json"
              RoleArn: !Sub "{{resolve:ssm:/iam/${InfrastructureName}/role/codepipeline/${ProjectName}/deploy/arn}}"
              OutputFileName: "out.json"
              ParameterOverrides: !Sub |
                {
                  "InfrastructureName": "${InfrastructureName}",
                  "BusName": "${BusName}",
                  "QueueBaseName": "${ProjectName}-dead-letter",
                  "TagEnvironment": "${TagEnvironment}"
                }
            InputArtifacts:
            - Name: "EVENT_BUS_SOURCE_FILES"
            - Name: "EVENT_BUS_ENV_SOURCE_FILES"
            OutputArtifacts:
            - Name: "SQS_DEAD_LETTER_QUEUE_OUTPUT_SECOND_REGION"
            RunOrder: 4
            Region: !Ref SecondRegion
          - !Ref "AWS::NoValue"

        # Bus for the First/Primary Region

        - Name: "Event_Bus_First_Region"
          ActionTypeId:
            Category: "Deploy"
            Owner: "AWS"
            Provider: "CloudFormation"
            Version: "1"
          Configuration:
            ActionMode: !Ref ActionMode
            StackName: !Sub "${InfrastructureName}-event-bus-${ProjectName}-${TagEnvironment}"
            Capabilities: !Ref CloudFormationCapabilities
            TemplatePath:
              Fn::Sub:
              - "EVENT_BUS_SOURCE_FILES::${Folder}iac/cfn/events/bus.yaml"
              - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
            TemplateConfiguration:
              Fn::Sub:
              - "EVENT_BUS_ENV_SOURCE_FILES::${Folder}env/cfn/events/bus/${TagEnvironment}.json"
              - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
            RoleArn: !Sub "{{resolve:ssm:/iam/${InfrastructureName}/role/codepipeline/${ProjectName}/deploy/arn}}"
            OutputFileName: "out.json"
            ParameterOverrides: !Sub |
              {
                "InfrastructureName": "${InfrastructureName}",
                "BusName": "${BusName}",
                "ProjectName": "${ProjectName}",
                "EnableTestRule": "${EnableTestRule}",
                "TagEnvironment": "${TagEnvironment}"
              }
          InputArtifacts:
          - Name: "EVENT_BUS_SOURCE_FILES"
          - Name: "EVENT_BUS_ENV_SOURCE_FILES"
          OutputArtifacts:
          - Name: "EVENT_BUS_FIRST_REGION_OUTPUT"
          RunOrder: 5
          Region: !Ref "AWS::Region"

        # Bus for the Secondary Region

        - !If
          - SecondRegion
          - Name: "Event_Bus_Second_Region"
            ActionTypeId:
              Category: "Deploy"
              Owner: "AWS"
              Provider: "CloudFormation"
              Version: "1"
            Configuration:
              ActionMode: !Ref ActionMode
              StackName: !Sub "${InfrastructureName}-event-bus-${ProjectName}-${TagEnvironment}"
              Capabilities: !Ref CloudFormationCapabilities
              TemplatePath:
                Fn::Sub:
                - "EVENT_BUS_SOURCE_FILES::${Folder}iac/cfn/events/bus.yaml"
                - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
              TemplateConfiguration:
                Fn::Sub:
                - "EVENT_BUS_ENV_SOURCE_FILES::${Folder}env/cfn/events/${TagEnvironment}.json"
                - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
              RoleArn: !Sub "{{resolve:ssm:/iam/${InfrastructureName}/role/codepipeline/${ProjectName}/deploy/arn}}"
              OutputFileName: "out.json"
              ParameterOverrides: !Sub |
                {
                  "InfrastructureName": "${InfrastructureName}",
                  "BusName": "${BusName}",
                  "ProjectName": "${ProjectName}",
                  "EnableTestRule": "${EnableTestRule}",
                  "TagEnvironment": "${TagEnvironment}"
                }
            InputArtifacts:
            - Name: "EVENT_BUS_SOURCE_FILES"
            - Name: "EVENT_BUS_ENV_SOURCE_FILES"
            OutputArtifacts:
            - Name: "EVENT_BUS_SECOND_REGION_OUTPUT"
            RunOrder: 5
            Region: !Ref SecondRegion
          - !Ref "AWS::NoValue"

        # Schemas for the First/Primary Region

        - Name: "Event_Bus_Schemas_First_Region"
          ActionTypeId:
            Category: "Deploy"
            Owner: "AWS"
            Provider: "CloudFormation"
            Version: "1"
          Configuration:
            ActionMode: !Ref ActionMode
            StackName: !Sub "${InfrastructureName}-event-bus-schemas-${ProjectName}-${TagEnvironment}"
            Capabilities: !Ref CloudFormationCapabilities
            TemplatePath:
              Fn::Sub:
              - "EVENT_BUS_SOURCE_FILES::${Folder}iac/cfn/events/schemas/standard.yaml"
              - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
            TemplateConfiguration:
              Fn::Sub:
              - "EVENT_BUS_ENV_SOURCE_FILES::${Folder}env/cfn/events/schemas/standard.json"
              - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
            RoleArn: !Sub "{{resolve:ssm:/iam/${InfrastructureName}/role/codepipeline/${ProjectName}/deploy/arn}}"
            OutputFileName: "out.json"
            ParameterOverrides: !Sub |
              {
                "InfrastructureName": "${InfrastructureName}",
                "TagEnvironment": "${TagEnvironment}"
              }
          InputArtifacts:
          - Name: "EVENT_BUS_SOURCE_FILES"
          - Name: "EVENT_BUS_ENV_SOURCE_FILES"
          OutputArtifacts:
          - Name: "EVENT_BUS_SCHEMAS_FIRST_REGION_OUTPUT"
          RunOrder: 6
          Region: !Ref "AWS::Region"

        # Schemas for the Secondary Region

        - !If
          - SecondRegion
          - Name: "Event_Bus_Schemas_Second_Region"
            ActionTypeId:
              Category: "Deploy"
              Owner: "AWS"
              Provider: "CloudFormation"
              Version: "1"
            Configuration:
              ActionMode: !Ref ActionMode
              StackName: !Sub "${InfrastructureName}-event-bus-schemas-${ProjectName}-${TagEnvironment}"
              Capabilities: !Ref CloudFormationCapabilities
              TemplatePath:
                Fn::Sub:
                - "EVENT_BUS_SOURCE_FILES::${Folder}iac/cfn/events/schemas/standard.yaml"
                - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
              TemplateConfiguration:
                Fn::Sub:
                - "EVENT_BUS_ENV_SOURCE_FILES::${Folder}env/cfn/events/schemas/standard.json"
                - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
              RoleArn: !Sub "{{resolve:ssm:/iam/${InfrastructureName}/role/codepipeline/${ProjectName}/deploy/arn}}"
              OutputFileName: "out.json"
              ParameterOverrides: !Sub |
                {
                  "InfrastructureName": "${InfrastructureName}",
                  "TagEnvironment": "${TagEnvironment}"
                }
            InputArtifacts:
            - Name: "EVENT_BUS_SOURCE_FILES"
            - Name: "EVENT_BUS_ENV_SOURCE_FILES"
            OutputArtifacts:
            - Name: "EVENT_BUS_SCHEMAS_SECOND_REGION_OUTPUT"
            RunOrder: 6
            Region: !Ref SecondRegion
          - !Ref "AWS::NoValue"

        # Rules for the First/Primary Region

        - Name: "Event_Rule_Detail_Context_Standard_Region"
          ActionTypeId:
            Category: "Deploy"
            Owner: "AWS"
            Provider: "CloudFormation"
            Version: "1"
          Configuration:
            ActionMode: !Ref ActionMode
            StackName: !Sub "${InfrastructureName}-event-bus-rule-detail-context-standard-${ProjectName}-${TagEnvironment}"
            Capabilities: !Ref CloudFormationCapabilities
            TemplatePath:
              Fn::Sub:
              - "EVENT_BUS_SOURCE_FILES::${Folder}iac/cfn/events/rules/detail-context/standard.yaml"
              - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
            TemplateConfiguration:
              Fn::Sub:
              - "EVENT_BUS_ENV_SOURCE_FILES::${Folder}env/cfn/events/rules/detail-context/standard/${TagEnvironment}.json"
              - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
            RoleArn: !Sub "{{resolve:ssm:/iam/${InfrastructureName}/role/codepipeline/${ProjectName}/deploy/arn}}"
            OutputFileName: "out.json"
            ParameterOverrides: !Sub |
              {
                "InfrastructureName": "${InfrastructureName}",
                "BusName": "${BusName}",
                "ProjectName": "${ProjectName}",
                "RuleDetailContext": "standard",
                "TagEnvironment": "${TagEnvironment}"
              }
          InputArtifacts:
          - Name: "EVENT_BUS_SOURCE_FILES"
          - Name: "EVENT_BUS_ENV_SOURCE_FILES"
          OutputArtifacts:
          - Name: "RULE_DETAIL_CONTEXT_STANDARD_FIRST_REGION_OUTPUT"
          RunOrder: 7
          Region: !Ref "AWS::Region"

        # Rules for the Secondary Region

        - !If
          - SecondRegion
          - Name: "Event_Rule_Detail_Context_Standard_Second_Region"
            ActionTypeId:
              Category: "Deploy"
              Owner: "AWS"
              Provider: "CloudFormation"
              Version: "1"
            Configuration:
              ActionMode: !Ref ActionMode
              StackName: !Sub "${InfrastructureName}-event-bus-rule-detail-context-standard-${ProjectName}-${TagEnvironment}"
              Capabilities: !Ref CloudFormationCapabilities
              TemplatePath:
                Fn::Sub:
                - "EVENT_BUS_SOURCE_FILES::${Folder}iac/cfn/events/rules/detail-context/standard.yaml"
                - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
              TemplateConfiguration:
                Fn::Sub:
                - "EVENT_BUS_ENV_SOURCE_FILES::${Folder}env/cfn/events/rules/detail-context/standard/${TagEnvironment}.json"
                - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
              RoleArn: !Sub "{{resolve:ssm:/iam/${InfrastructureName}/role/codepipeline/${ProjectName}/deploy/arn}}"
              OutputFileName: "out.json"
              ParameterOverrides: !Sub |
                {
                  "InfrastructureName": "${InfrastructureName}",
                  "BusName": "${BusName}",
                  "ProjectName": "${ProjectName}",
                  "RuleDetailContext": "standard",
                  "TagEnvironment": "${TagEnvironment}"
                }
            InputArtifacts:
            - Name: "EVENT_BUS_SOURCE_FILES"
            - Name: "EVENT_BUS_ENV_SOURCE_FILES"
            OutputArtifacts:
            - Name: "RULE_DETAIL_CONTEXT_STANDARD_SECOND_REGION_OUTPUT"
            RunOrder: 7
            Region: !Ref SecondRegion
          - !Ref "AWS::NoValue"

        # Infrastructure Testing CodeBuild for the First/Primary Region

        - !If
          - CodeBuildRunInfrastructureTests
          - Name: "Run_Test_Build_Primary_Region"
            ActionTypeId:
              Category: "Test"
              Owner: "AWS"
              Provider: "CodeBuild"
              Version: "1"
            Configuration:
              ProjectName: !Ref CodeBuildInfrastructureTestProject
              PrimarySource: "TEST_SOURCE_FILES"
              EnvironmentVariables: !Sub |
                [
                  {
                    "name":"APP_BASE_FOLDER",
                    "value":"${AppBaseFolder}",
                    "type":"PLAINTEXT"
                  },
                  {
                    "name":"ENVIRONMENT",
                    "value":"${TagEnvironment}",
                    "type":"PLAINTEXT"
                  }
                ]
            InputArtifacts:
            - Name: "TEST_SOURCE_FILES"
            OutputArtifacts:
            - Name: "TEST_INFRASTRUCTURE_BUILD_OUTPUT_PRIMARY_REGION"
            RunOrder: 11
          - !Ref "AWS::NoValue"

        # Infrastructure Testing CodeBuild for the Secondary Region

        - !If
          - CodeBuildRunInfrastructureTestsSecondRegion
          - Name: "Run_Test_Build_Secondary_Region"
            ActionTypeId:
              Category: "Test"
              Owner: "AWS"
              Provider: "CodeBuild"
              Version: "1"
            Configuration:
              ProjectName: !Ref CodeBuildInfrastructureTestProject
              PrimarySource: "TEST_SOURCE_FILES"
              EnvironmentVariables: !Sub |
                [
                  {
                    "name":"APP_BASE_FOLDER",
                    "value":"${AppBaseFolder}",
                    "type":"PLAINTEXT"
                  },
                  {
                    "name":"ENVIRONMENT",
                    "value":"${TagEnvironment}",
                    "type":"PLAINTEXT"
                  }
                ]
            InputArtifacts:
            - Name: "TEST_SOURCE_FILES"
            OutputArtifacts:
            - Name: "TEST_INFRASTRUCTURE_BUILD_OUTPUT_SECONDARY_REGION"
            RunOrder: 11
            Region: !Ref SecondRegion
          - !Ref "AWS::NoValue"

        # Enable Approval Process

        - !If
          - ApprovalEnvironment
          - Name: "Approval"
            ActionTypeId:
              Category: "Approval"
              Owner: "AWS"
              Provider: "Manual"
              Version: "1"
            Configuration:
              CustomData: !Sub "${ApprovalMessagePrefix} \"${ApprovalEnvironment}\" ${ApprovalMessageSuffix}"
              ExternalEntityLink: !Sub "https://github.com/${AppGitHubOrganization}/${AppSourceRepository}/tree/${AppSourceBranch}"
            RunOrder: 12
          - !Ref "AWS::NoValue"
      - !If
        - ApprovalEnvironment
        - Name: "Promote"
          Actions:
          - Name: "Promote_Test_Source"
            ActionTypeId:
              Category: "Deploy"
              Owner: "AWS"
              Provider: "S3"
              Version: "1"
            Configuration:
              BucketName: !If [ Stage, !Ref ProdBucket, !Sub "{{resolve:ssm:/s3/${InfrastructureName}/bucket/artifact/name}}" ]
              Extract: false
              ObjectKey: !Sub "${ProjectName}/${ApprovalEnvironment}/${TestSourceFile}"
              CannedACL: !Ref CannedAcl
            InputArtifacts:
            - Name: "TEST_SOURCE_FILES"
            RunOrder: 1
            Region: !Ref "AWS::Region"
          - Name: "Promote_Event_Bus_Source"
            ActionTypeId:
              Category: "Deploy"
              Owner: "AWS"
              Provider: "S3"
              Version: "1"
            Configuration:
              BucketName: !If [ Stage, !Ref ProdBucket, !Sub "{{resolve:ssm:/s3/${InfrastructureName}/bucket/artifact/name}}" ]
              Extract: false
              ObjectKey: !Sub "${ProjectName}/${ApprovalEnvironment}/${EventSourceFile}"
              CannedACL: !Ref CannedAcl
            InputArtifacts:
            - Name: "EVENT_BUS_SOURCE_FILES"
            RunOrder: 2
            Region: !Ref "AWS::Region"

          # Enable Release Process

          - !If
            - EnableRelease
            - Name: "GitHub_Variables"
              Namespace: "GitHubVariables"
              ActionTypeId:
                Category: "Deploy"
                Owner: "AWS"
                Provider: "CloudFormation"
                Version: "1"
              Configuration:
                ActionMode: !Ref ActionMode
                StackName: !Sub "${InfrastructureName}-github-variables-${ProjectName}-${TagEnvironment}"
                Capabilities: !Ref CloudFormationCapabilities
                TemplatePath:
                  Fn::Sub:
                  - "EVENT_BUS_SOURCE_FILES::${Folder}iac/cfn/custom/github-variables.yaml"
                  - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
                RoleArn: !Sub "{{resolve:ssm:/iam/${InfrastructureName}/role/codepipeline/${ProjectName}/deploy/arn}}"
                OutputFileName: "out.json"
                ParameterOverrides: !Sub |
                  {
                    "CurrentRelease": { "Fn::GetParam" : [ "EVENT_BUS_SOURCE_FILES", "${GitMetadataFile}", "release" ] },
                    "GitShortCommit": { "Fn::GetParam" : [ "EVENT_BUS_SOURCE_FILES", "${GitMetadataFile}", "shortRevision" ] },
                    "GitFullCommit": { "Fn::GetParam" : [ "EVENT_BUS_SOURCE_FILES", "${GitMetadataFile}", "fullRevision" ] },
                    "GitOwner": { "Fn::GetParam" : [ "EVENT_BUS_SOURCE_FILES", "${GitMetadataFile}", "organization" ] },
                    "GitRepository": { "Fn::GetParam" : [ "EVENT_BUS_SOURCE_FILES", "${GitMetadataFile}", "repository" ] },
                    "PrevRelease": { "Fn::GetParam" : [ "EVENT_BUS_SOURCE_FILES", "${GitMetadataFile}", "prevRelease" ] }
                  }
              InputArtifacts:
              - Name: "EVENT_BUS_SOURCE_FILES"
              OutputArtifacts:
              - Name: "GITHUB_VARIABLES_OUTPUT"
              RunOrder: 3
              Region: !Ref "AWS::Region"
            - !Ref "AWS::NoValue"
          - !If
            - EnableRelease
            - Name: "GitHub_Release"
              ActionTypeId:
                Category: "Invoke"
                Owner: "AWS"
                Provider: "Lambda"
                Version: "1"
              Configuration:
                FunctionName: !Sub "{{resolve:ssm:/lambda/${InfrastructureName}/function/github-release-prod/name}}"
                UserParameters: !Sub
                - |
                  {
                    "commit": "#{GitHubVariables.GitFullCommit}",
                    "currentRelease": "#{GitHubVariables.CurrentRelease}",
                    "mode": "createRelease",
                    "owner": "#{GitHubVariables.GitOwner}",
                    "prerelease": "${GitHubPrerelease}",
                    "prevRelease": "#{GitHubVariables.PrevRelease}",
                    "repository": "#{GitHubVariables.GitRepository}"
                  }
                - GitHubPrerelease: !If [ Production, false, true ]
              InputArtifacts:
              - Name: "GITHUB_VARIABLES_OUTPUT"
              RunOrder: 4
              Region: !Ref "AWS::Region"
            - !Ref "AWS::NoValue"
        - !Ref "AWS::NoValue"

      # Enable Post-Production Process

      - !If
        - Production
        - Name: "Post_Production"
          Actions:
          - !If
            - EnableRelease
            - Name: "GitHub_Variables"
              Namespace: "GitHubVariables"
              ActionTypeId:
                Category: "Deploy"
                Owner: "AWS"
                Provider: "CloudFormation"
                Version: "1"
              Configuration:
                ActionMode: !Ref ActionMode
                StackName: !Sub "${InfrastructureName}-github-variables-${ProjectName}-${TagEnvironment}"
                Capabilities: !Ref CloudFormationCapabilities
                TemplatePath:
                  Fn::Sub:
                  - "EVENT_BUS_SOURCE_FILES::${Folder}iac/cfn/custom/github-variables.yaml"
                  - Folder: !If [ AppBaseFolder, !Sub "${AppBaseFolder}/", "" ]
                RoleArn: !Sub "{{resolve:ssm:/iam/${InfrastructureName}/role/codepipeline/${ProjectName}/deploy/arn}}"
                OutputFileName: "out.json"
                ParameterOverrides: !Sub |
                  {
                    "CurrentRelease": { "Fn::GetParam" : [ "EVENT_BUS_SOURCE_FILES", "${GitMetadataFile}", "release" ] },
                    "GitShortCommit": { "Fn::GetParam" : [ "EVENT_BUS_SOURCE_FILES", "${GitMetadataFile}", "shortRevision" ] },
                    "GitFullCommit": { "Fn::GetParam" : [ "EVENT_BUS_SOURCE_FILES", "${GitMetadataFile}", "fullRevision" ] },
                    "GitOwner": { "Fn::GetParam" : [ "EVENT_BUS_SOURCE_FILES", "${GitMetadataFile}", "organization" ] },
                    "GitRepository": { "Fn::GetParam" : [ "EVENT_BUS_SOURCE_FILES", "${GitMetadataFile}", "repository" ] },
                    "PrevRelease": { "Fn::GetParam" : [ "EVENT_BUS_SOURCE_FILES", "${GitMetadataFile}", "prevRelease" ] }
                  }
              InputArtifacts:
              - Name: "EVENT_BUS_SOURCE_FILES"
              OutputArtifacts:
              - Name: "GITHUB_VARIABLES_PROD_OUTPUT"
              RunOrder: 1
              Region: !Ref "AWS::Region"
            - !Ref "AWS::NoValue"
          - !If
            - EnableRelease
            - Name: "GitHub_Release"
              ActionTypeId:
                Category: "Invoke"
                Owner: "AWS"
                Provider: "Lambda"
                Version: "1"
              Configuration:
                FunctionName: !Sub "{{resolve:ssm:/lambda/${InfrastructureName}/function/github-release-prod/name}}"
                UserParameters: !Sub
                - |
                  {
                    "commit": "#{GitHubVariables.GitFullCommit}",
                    "currentRelease": "#{GitHubVariables.CurrentRelease}",
                    "mode": "updateRelease",
                    "owner": "#{GitHubVariables.GitOwner}",
                    "prerelease": "${GitHubPrerelease}",
                    "prevRelease": "#{GitHubVariables.PrevRelease}",
                    "repository": "#{GitHubVariables.GitRepository}"
                  }
                - GitHubPrerelease: !If [ Production, false, true ]
              InputArtifacts:
              - Name: "GITHUB_VARIABLES_PROD_OUTPUT"
              RunOrder: 2
              Region: !Ref "AWS::Region"
            - !Ref "AWS::NoValue"
          - Name: "GitHub_Create_Unstable_Branch"
            ActionTypeId:
              Category: "Invoke"
              Owner: "AWS"
              Provider: "Lambda"
              Version: "1"
            Configuration:
              FunctionName: !Sub "{{resolve:ssm:/lambda/${InfrastructureName}/function/github-release-prod/name}}"
              UserParameters: !Sub
              - |
                {
                  "commit": "#{GitHubVariables.GitFullCommit}",
                  "currentRelease": "#{GitHubVariables.CurrentRelease}",
                  "mode": "createUnstableBranch",
                  "owner": "#{GitHubVariables.GitOwner}",
                  "prerelease": "${GitHubPrerelease}",
                  "prevRelease": "#{GitHubVariables.PrevRelease}",
                  "repository": "#{GitHubVariables.GitRepository}",
                  "unstableBranch": "${UnstableBranch}"
                }
              - GitHubPrerelease: !If [ Production, false, true ]
            InputArtifacts:
            - Name: "GITHUB_VARIABLES_PROD_OUTPUT"
            RunOrder: 3
            Region: !Ref "AWS::Region"
        - !Ref "AWS::NoValue"
      Tags:
      - Key: "Name"
        Value: !Ref "AWS::StackName"
      - Key: "application"
        Value: !Ref "AWS::StackName"
      - Key: "contact-email"
        Value: !Sub "{{resolve:ssm:/account/${InfrastructureName}/tag/contact-email}}"
      - Key: "customer"
        Value: !Sub "{{resolve:ssm:/account/${InfrastructureName}/tag/customer}}"
      - Key: "environment"
        Value: !Ref TagEnvironment
      - Key: "team"
        Value: !Sub "{{resolve:ssm:/account/${InfrastructureName}/tag/team}}"
Outputs:
  CodePipeline:
    Description: "The pipeline project created."
    Value: !Ref CodePipeline
    Export:
      Name: !Sub "${AWS::StackName}-CodePipeline"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: "General Configuration"
      Parameters:
      - InfrastructureName
      - SecondRegion
    - Label:
        default: "CodePipeline Configuration"
      Parameters:
      - CloudFormationCapabilities
      - EnableRelease
      - ProjectName
      - AppBaseFolder
      - ActionMode
    - Label:
        default: "CodePipeline Notification Configuration"
      Parameters:
      - EnableNotifications
      - SlackNotificationLambda
    - Label:
        default: "Source Configuration"
      Parameters:
      - AppGitHubOrganization
      - AppSourceRepository
      - AppSourceBranch
      - BaseArtifactFolder
      - CannedAcl
      - SourceFolder
      - EventSourceFile
      - EventEnvSourceFile
      - TestSourceFile
      - EventSourcePollForChanges
    - Label:
        default: "Production Configuration"
      Parameters:
      - ProdBucket
      - UnstableBranch
    - Label:
        default: "Testing Configuration"
      Parameters:
      - CodeBuildRunAppTests
      - CodeBuildRunInfrastructureTests
      - CodeBuildAppTestProject
      - CodeBuildInfrastructureTestProject
    - Label:
        default: "Approval Configuration"
      Parameters:
      - ApprovalMessagePrefix
      - ApprovalEnvironment
      - ApprovalMessageSuffix
    - Label:
        default: "Bus Configuration"
      Parameters:
      - BusName
    - Label:
        default: "Testing Configuration"
      Parameters:
      - EnableTestRule
    - Label:
        default: "Tags"
      Parameters:
      - TagEnvironment
    ParameterLabels:
      # General Configuration
      InfrastructureName:
        default: "Infrastructure Name:"
      SecondRegion:
        default: "Second Region:"
      # CodeBuild Configuration
      CodeBuildAppTestProject:
        default: "CodeBuild App Test Project Name:"
      CodeBuildInfrastructureTestProject:
        default: "CodeBuild Infrastructure Test Project Name:"
      # CodePipeline Configuration
      CloudFormationCapabilities:
        default: "CloudFormation Capabilities:"
      EnableRelease:
        default: "Enable Release:"
      ProjectName:
        default: "CodePipeline Project Name:"
      AppBaseFolder:
        default: "CodePipeline Application Base Folder:"
      ActionMode:
        default: "CodePipeline CloudFormation Action Mode:"
      # CodePipeline Notification Configuration
      EnableNotifications:
        default: "Enable E-mail and Slack Notifications:"
      SlackNotificationLambda:
        default: "Slack Notification Lambda Name:"
      # Source Configuration
      AppGitHubOrganization:
        default: "GitHub Organization:"
      AppSourceRepository:
        default: "Source Repository:"
      AppSourceBranch:
        default: "Source Branch:"
      BaseArtifactFolder:
        default: "Base Artifact Folder:"
      CannedAcl:
        default: "Canned ACL:"
      SourceFolder:
        default: "Source Folder:"
      EventSourceFile:
        default: "Service Source File:"
      EventEnvSourceFile:
        default: "Service Environment Source File:"
      EventSourcePollForChanges:
        default: "Poll for Source Changes:"
      TestSourceFile:
        default: "Test Source File:"
      ProdBucket:
        default: "Production Bucket:"
      # Testing Configuration
      CodeBuildRunAppTests:
        default: "Run Application Tests:"
      CodeBuildRunInfrastructureTests:
        default: "Run Infrastructure Tests:"
      # Approval Configuration
      ApprovalMessagePrefix:
        default: "Approval Message Prefix:"
      ApprovalEnvironment:
        default: "Approval Environment:"
      ApprovalMessageSuffix:
        default: "Approval Message Suffix:"
      UnstableBranch:
        default: "Unstable Branch:"
      # Service Configuration
      BusName:
        default: "EventBridge Bus Name:"
      EnableTestRule:
        default: "Enable Test Rule:"
      # Tags
      TagEnvironment:
        default: "Environment:"